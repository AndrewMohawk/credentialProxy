generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                 @id @default(uuid())
  username        String                 @unique
  email           String                 @unique
  passwordHash    String?
  challenge       String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  auditEvents     AuditEvent[]
  credentials     Credential[]
  passkeys        Passkey[]
  preApprovedKeys PreApprovedPublicKey[]
}

model Passkey {
  id                 String   @id
  userId             String
  publicKey          Bytes
  counter            BigInt
  credentialBackedUp Boolean  @default(false)
  transports         String[]
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credential {
  id           String         @id @default(uuid())
  name         String
  type         CredentialType
  data         Json
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isEnabled    Boolean        @default(true)
  auditEvents  AuditEvent[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  policies     Policy[]
  applications Application[]  @relation("ApplicationToCredential")
}

model Policy {
  id           String        @id @default(uuid())
  name         String
  credentialId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  description  String?
  config       Json
  createdBy    String?
  enabled      Boolean       @default(true)
  version      Int           @default(1)
  type         String
  auditEvents  AuditEvent[]
  credential   Credential    @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  applications Application[] @relation("ApplicationToPolicy")

  @@index([credentialId])
  @@index([type])
}

model Application {
  id             String            @id @default(uuid())
  name           String
  publicKey      String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  callbackUrl    String?
  description    String?
  lastAccessedAt DateTime?
  registrationIp String?
  revokedAt      DateTime?
  revokedReason  String?
  secret         String?
  status         ApplicationStatus @default(PENDING)
  auditEvents    AuditEvent[]
  credentials    Credential[]      @relation("ApplicationToCredential")
  policies       Policy[]          @relation("ApplicationToPolicy")
}

model PreApprovedPublicKey {
  id                String    @id @default(uuid())
  publicKey         String    @unique
  description       String?
  createdById       String
  used              Boolean   @default(false)
  usedByApplication String?
  createdAt         DateTime  @default(now())
  expiresAt         DateTime?
  createdBy         User      @relation(fields: [createdById], references: [id])
}

model AuditEvent {
  id            String         @id @default(uuid())
  type          String
  details       Json
  userId        String?
  credentialId  String?
  applicationId String?
  policyId      String?
  requestId     String?
  requestStatus RequestStatus?
  requestData   Json?
  responseData  Json?
  createdAt     DateTime       @default(now())
  application   Application?   @relation(fields: [applicationId], references: [id])
  credential    Credential?    @relation(fields: [credentialId], references: [id])
  policy        Policy?        @relation(fields: [policyId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
}

model PendingRequest {
  id            String        @id @default(uuid())
  requestData   Json
  policyId      String
  applicationId String
  credentialId  String
  status        RequestStatus @default(PENDING)
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Plugin {
  id          String    @id
  name        String
  description String
  type        String    @unique
  version     String
  enabled     Boolean   @default(true)
  configData  Json?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum CredentialType {
  OAUTH
  API_KEY
  ETHEREUM_KEY
  OTHER
  COOKIE
  TWITTER_OAUTH
}

enum PolicyType {
  ALLOW_LIST
  DENY_LIST
  TIME_BASED
  COUNT_BASED
  MANUAL_APPROVAL
  PATTERN_MATCH
}

enum ApplicationStatus {
  ACTIVE
  PENDING
  REVOKED
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  COMPLETED
  ERROR
}
